service: dynamodb
frameworkVersion: ">=1.14.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  stage: ${env:SLS_STAGE, self:custom.stageDefault}

plugins:
  # https://github.com/sbstjn/serverless-dynamodb-autoscaling
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html#cfn-dynamodb-table-examples-application-autoscaling
  - serverless-dynamodb-autoscaling

custom:
  stageDefault: dev
  customCapacities:
    # test stage table capacities: use same as dev
    test: ${self:custom.customCapacities.dev}
    # dev stage table capacities
    dev:
      usersTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      charitiesTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      widgetsTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      userLevelsTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      vcDonationLogTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      userRevenueLogTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      userDataConsentLogTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      backgroundImagesTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      userWidgetsTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      userTabsLogTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
      referralDataLogTable:
        read:
          minimum: 1
          maximum: 1000
          usage: 0.75
        write:
          minimum: 1
          maximum: 1000
          usage: 0.60
    # prod stage table capacities
    prod:
      usersTable:
        read:
          minimum: 80
          maximum: 9001
          usage: 0.75
        write:
          minimum: 40
          maximum: 9001
          usage: 0.60
      charitiesTable:
        read:
          minimum: 5
          maximum: 9001
          usage: 0.75
        write:
          minimum: 1
          maximum: 9001
          usage: 0.60
      widgetsTable:
        read:
          minimum: 10
          maximum: 9001
          usage: 0.75
        write:
          minimum: 1
          maximum: 9001
          usage: 0.60
      userLevelsTable:
        read:
          minimum: 5
          maximum: 9001
          usage: 0.75
        write:
          minimum: 1
          maximum: 9001
          usage: 0.60
      vcDonationLogTable:
        read:
          minimum: 1
          maximum: 9001
          usage: 0.75
        write:
          minimum: 5
          maximum: 9001
          usage: 0.60
      userRevenueLogTable:
        read:
          minimum: 1
          maximum: 9001
          usage: 0.75
        write:
          # Fairly high capacity needed, because it's one write per ad
          minimum: 20
          maximum: 9001
          usage: 0.60
      userDataConsentLogTable:
        read:
          minimum: 1
          maximum: 9001
          usage: 0.75
        write:
          minimum: 1
          maximum: 9001
          usage: 0.60
      backgroundImagesTable:
        read:
          minimum: 5
          maximum: 9001
          usage: 0.75
        write:
          minimum: 1
          maximum: 9001
          usage: 0.60
      userWidgetsTable:
        read:
          minimum: 90
          maximum: 9001
          usage: 0.75
        write:
          minimum: 50
          maximum: 9001
          usage: 0.60
      userTabsLogTable:
        read:
          minimum: 1
          maximum: 9001
          usage: 0.75
        write:
          minimum: 30
          maximum: 9001
          usage: 0.60
      referralDataLogTable:
        read:
          minimum: 20
          maximum: 9001
          usage: 0.75
        write:
          minimum: 10
          maximum: 9001
          usage: 0.60

  # https://github.com/sbstjn/serverless-dynamodb-autoscaling
  capacities:
    - table: usersTable
      index:
        - UsersByUsername
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.usersTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.usersTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.usersTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.usersTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.usersTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.usersTable.write.usage}
    - table: charitiesTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.charitiesTable.write.usage}
    - table: widgetsTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.widgetsTable.write.usage}
    - table: userLevelsTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userLevelsTable.write.usage}
    - table: vcDonationLogTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.vcDonationLogTable.write.usage}
    - table: userRevenueLogTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userRevenueLogTable.write.usage}
    - table: userDataConsentLogTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userDataConsentLogTable.write.usage}
    - table: backgroundImagesTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.backgroundImagesTable.write.usage}
    - table: userWidgetsTable
      index:
        - Widgets
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userWidgetsTable.write.usage}
    - table: userTabsLogTable
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.userTabsLogTable.write.usage}
    - table: referralDataLogTable
      index:
        - ReferralsByReferrer
      read:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.read.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.read.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.read.usage}
      write:
        minimum: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.write.minimum}
        maximum: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.write.maximum}
        usage: ${self:custom.customCapacities.${self:provider.stage}.referralDataLogTable.write.usage}

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Users-${self:provider.stage}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: username
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: UsersByUsername
            KeySchema:
              - AttributeName: username
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    charitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Charities-${self:provider.stage}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    widgetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Widgets-${self:provider.stage}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userLevelsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserLevels-${self:provider.stage}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    vcDonationLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: VcDonationLog-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userRevenueLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserRevenueLog-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userDataConsentLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserDataConsentLog-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    backgroundImagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: BackgroundImages-${self:provider.stage}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userWidgetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserWidgets-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: widgetId
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: widgetId
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: Widgets
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    userTabsLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UserTabsLog-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    referralDataLogTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ReferralDataLog-${self:provider.stage}
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: referringUser
            AttributeType: S
          - AttributeName: created
            AttributeType: S
        GlobalSecondaryIndexes:
          - IndexName: ReferralsByReferrer
            KeySchema:
              - AttributeName: referringUser
                KeyType: HASH
              - AttributeName: created
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
