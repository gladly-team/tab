type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  app: App
  user(userId: String!): User
  userImpact(userId: String!, charityId: String!): UserImpact
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Global app fields"""
type App implements Node {
  """The ID of an object"""
  id: ID!
  moneyRaised: Float
  dollarsPerDayRate: Float
  referralVcReward: Int

  """All the widgets"""
  widgets(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): WidgetConnection

  """One of the charities"""
  charity(charityId: String!): Charity

  """All the charities"""
  charities(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CharitiesFilters
  ): CharityConnection

  """All the causes"""
  causes(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    filters: CausesFilters
  ): CauseConnection

  """Get all the "legacy" (uncategorized) background Images"""
  backgroundImages(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): BackgroundImageConnection

  """Campaigns (or "charity spotlights") shown to users."""
  campaign: Campaign

  """All the search engines"""
  searchEngines: SearchEngineConnection
}

"""A connection to a list of items."""
type WidgetConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WidgetEdge]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""An edge in a connection."""
type WidgetEdge {
  """The item at the end of the edge"""
  node: Widget

  """A cursor for use in pagination"""
  cursor: String!
}

"""App widget"""
type Widget implements Node {
  """The ID of an object"""
  id: ID!

  """Widget display name"""
  name: String

  """Widget type"""
  type: String

  """Widget icon"""
  icon: String

  """The Widget enabled state"""
  enabled: Boolean

  """The Widget visible state"""
  visible: Boolean

  """Widget data."""
  data: String

  """Widget user specific configuration."""
  config: String

  """Widget general configuration."""
  settings: String
}

"""A charitable charity"""
type Charity implements Node {
  """The ID of an object"""
  id: ID!

  """the charity name"""
  name: String

  """the charity category"""
  category: String

  """the charity website"""
  website: String

  """the charity description"""
  description: String

  """the charity impact message"""
  impact: String

  """the charity logo image URI"""
  logo: String

  """the charity post-donation image URI"""
  image: String

  """An optional caption for the post-donation image"""
  imageCaption: String

  """The number of VC the charity has received in a given time period."""
  vcReceived(startTime: String, endTime: String): Int

  """Impact Metrics that belong to this Charity"""
  impactMetrics: [ImpactMetric]
}

"""An instance of ImpactMetric"""
type ImpactMetric implements Node {
  """The ID of an object"""
  id: ID!

  """Charity ID that this impact metric belongs to"""
  charity: Charity

  """
  Dollar amount (in micro USDs) required to achieve an instance of this ImpactMetric
  """
  dollarAmount: Int!

  """Markdown description of this ImpactMetric"""
  description: String!

  """
  Markdown. A shorter version of the description that answers "why this impact matters".
  """
  whyValuableDescription: String!

  """
  Metric title. Should be placeable in a sentence. Example: "1 home visit"
  """
  metricTitle: String!

  """
  Impact action title. Should be a longer title with a verb as well as a noun. Example: "Provide 1 visit from a community health worker"
  """
  impactTitle: String!

  """Whether or not this GroupImpactMetric is still active"""
  active: Boolean!
}

"""A connection to a list of items."""
type CharityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CharityEdge]
}

"""An edge in a connection."""
type CharityEdge {
  """The item at the end of the edge"""
  node: Charity

  """A cursor for use in pagination"""
  cursor: String!
}

"""Fields on which to filter the list of charities."""
input CharitiesFilters {
  isPermanentPartner: Boolean
}

"""A connection to a list of items."""
type CauseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CauseEdge]
}

"""An edge in a connection."""
type CauseEdge {
  """The item at the end of the edge"""
  node: Cause

  """A cursor for use in pagination"""
  cursor: String!
}

"""all cause specific data and ui content"""
type Cause implements Node {
  """The ID of an object"""
  id: ID!

  """Markdown - content that populates an "About the Cause" page"""
  about: String!

  """String used to describe cause in account page"""
  name: String!

  """boolean if cause is available to select in ui"""
  isAvailableToSelect: Boolean!

  """Cause's id"""
  causeId: String!

  """Name of an icon, mapping to an icon component on the frontend"""
  icon: String!

  """URL path for the landing page belonging to this cause"""
  landingPagePath: String!

  """Phrase for the landing page belonging to this cause"""
  landingPagePhrase: String!

  """Whether or not the current cause supports individual impact"""
  individualImpactEnabled: Boolean! @deprecated(reason: "Replaced by \"impactType\" field.")

  """Whether or not the current cause supports individual impact"""
  impactType: causeImpactType!

  """
  number of visits required for each impact unit (e.g. 14 for cat charity)
  """
  impactVisits: Int

  """the impact object on cause model"""
  impact: CauseSpecificImpactUI

  """the theme object on cause model"""
  theme: CauseTheming!

  """the sharing object on cause model"""
  sharing: SharingUICopy!

  """the onboarding object on cause model"""
  onboarding: OnboardingUICopy!

  """the group impact metric currently associated with this cause"""
  groupImpactMetric: GroupImpactMetric
}

"""The type of charitable impact that's enabled for this cause"""
enum causeImpactType {
  none
  individual
  group
}

"""cause specific UI content around impact"""
type CauseSpecificImpactUI {
  """markdown string: copy for ImpactCounter for normal case"""
  impactCounterText: String!

  """markdown string: title copy for referralReward UserImpact modal"""
  referralRewardTitle: String!

  """markdown string: subtitle copy for referralReward UserImpact modal"""
  referralRewardSubtitle: String!

  """markdown string: copy for referral reward notification"""
  referralRewardNotification: String!

  """markdown string: title for claimImpact notification in UserImpact"""
  claimImpactTitle: String!

  """markdown string: subtitle for claimImpact notification in UserImpact"""
  claimImpactSubtitle: String!

  """string: name of the icon to use in impact counter"""
  impactIcon: String!

  """file name of the cause GIF to use during onboarding"""
  walkMeGif: String

  """
  markdown string: copy for impact walkthrough notification in UserImpact when user is referred
  """
  newlyReferredImpactWalkthroughText: String!

  """
  markdown string: copy for impact walkthrough notification in UserImpact
  """
  impactWalkthroughText: String!

  """markdown string: copy for confirm impact modal in UserImpact"""
  confirmImpactSubtitle: String!
}

"""css properties for a specific cause"""
type CauseTheming {
  """the primary color hex value"""
  primaryColor: String!

  """the secondary color hex value"""
  secondaryColor: String!
}

"""cause specific UI content around sharing"""
type SharingUICopy {
  """markdown for modal title"""
  title: String!

  """markdown for modal subtitle"""
  subtitle: String!

  """
  value to use for img switch statement on frontend, probably ‘cats’ or ‘seas’
  """
  imgCategory: String!

  """Image to use in email invite dialog"""
  shareImage: String!

  """Image shown after email invite sent"""
  sentImage: String!

  """copy for reddit button"""
  redditButtonTitle: String!

  """copy for facebook button"""
  facebookButtonTitle: String!

  """copy for twitter button"""
  twitterButtonTitle: String!

  """copy for tumblr button"""
  tumblrTitle: String!

  """copy for tumblr caption"""
  tumblrCaption: String!
}

"""cause specific UI content around onboarding"""
type OnboardingUICopy {
  """the steps array in onboarding"""
  steps: [onboardingUIStep]!

  """
  markdown string shown when prompting the user to open their first tab, currently info about cat treats
  """
  firstTabIntroDescription: String!
}

"""ui content for each onboarding step"""
type onboardingUIStep {
  """markdown title for onboarding step"""
  title: String!

  """markdown subtitle for onboarding step"""
  subtitle: String!

  """name of image to show"""
  imgName: String!
}

"""A specific instance of GroupImpactMetric"""
type GroupImpactMetric implements Node {
  """The ID of an object"""
  id: ID!

  """The cause ID this GroupImpactMetric belongs to"""
  cause: Cause

  """Information about the ImpactMetric"""
  impactMetric: ImpactMetric

  """
  The micro USD amount raised for this instance of GroupImpactMetric so far
  """
  dollarProgress: Int!

  """
  The micro USD amount raised for this instance of GroupImpactMetric so far
  """
  dollarGoal: Int!

  """ISO datetime string of when this GroupImpactMetric was started"""
  dateStarted: String

  """ISO datetime string of when this GroupImpactMetric was ended"""
  dateCompleted: String
}

"""Fields on which to filter the list of causes."""
input CausesFilters {
  isAvailableToSelect: Boolean
}

"""A connection to a list of items."""
type BackgroundImageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BackgroundImageEdge]
}

"""An edge in a connection."""
type BackgroundImageEdge {
  """The item at the end of the edge"""
  node: BackgroundImage

  """A cursor for use in pagination"""
  cursor: String!
}

"""A background image"""
type BackgroundImage implements Node {
  """The ID of an object"""
  id: ID!

  """the background image name"""
  name: String

  """The image filename"""
  image: String

  """The image file URL"""
  imageURL: String

  """the category that the image falls into"""
  category: String!

  """The image thumbnail filename"""
  thumbnail: String

  """The image thumbnail URL"""
  thumbnailURL: String

  """ISO datetime string of when the background image was last set"""
  timestamp: String
}

"""Campaigns (or "charity spotlights") shown to users."""
type Campaign {
  """The ID of the campaign"""
  campaignId: String

  """The charity that this campaign features"""
  charity: Charity

  """The text content for the campaign"""
  content: CampaignContent!

  """
  The text content for the campaign when it has finished (past the end time)
  """
  endContent: CampaignContent @deprecated(reason: "The content returned by the server will automatically change when the campaign ends.")

  """Whether or not the campaign should currently show to users"""
  isLive: Boolean!

  """Information on progress toward a target impact goal for the campaign"""
  goal: CampaignGoal

  """The number of new users who joined during this campaign."""
  numNewUsers: Int @deprecated(reason: "Replaced by the generalized \"goal\" data.")

  """Whether to show a countdown timer for when the campaign will end"""
  showCountdownTimer: Boolean!

  """
  Whether to show a button to donate hearts to the charity featured in the campaign -- which requires the "charity " field to be defined
  """
  showHeartsDonationButton: Boolean!

  """
  Whether to show a progress bar -- which requires the "goal" field to be defined
  """
  showProgressBar: Boolean!

  """Whether to show social sharing buttons"""
  showSocialSharing: Boolean!

  """Social sharing buttons"""
  socialSharing: CampaignSocialSharing

  """Theming/style for the campaign"""
  theme: CampaignTheme

  """The start and end times (in ISO timestamps) for the campaign"""
  time: CampaignTime!
}

"""Text content for campaigns"""
type CampaignContent {
  """The campaign title, using markdown"""
  titleMarkdown: String!

  """
  The primary campaign text content (paragraphs, links, etc.), using markdown
  """
  descriptionMarkdown: String!

  """
  Additional campaign text content (paragraphs, links, etc.), using markdown
  """
  descriptionMarkdownTwo: String
}

"""Information on progress toward a target impact goal for the campaign"""
type CampaignGoal {
  """
  The goal number of whatever impact units the campaign is hoping to achieve
  """
  targetNumber: Float!

  """
  The current number of whatever impact units the campaign is hoping to achieve
  """
  currentNumber: Float!

  """
  The English word for the impact unit, singular (e.g. Heart, dollar, puppy)
  """
  impactUnitSingular: String!

  """
  The English word for the impact unit, plural (e.g. Hearts, dollars, puppies)
  """
  impactUnitPlural: String!

  """
  The past-tense participle English verb that describes achieving the impact unit (e.g. given, raised, adopted)
  """
  impactVerbPastParticiple: String!

  """
  The simple past-tense English verb that describes achieving the impact unit (e.g. gave, raised, adopted)
  """
  impactVerbPastTense: String!

  """
  If true, do not display a currentNumber greater than the targetNumber. Instead, limit goal progress to 100% of the target.
  """
  limitProgressToTargetMax: Boolean!

  """
  Whether the progress bar should have labels of the current number and goal number
  """
  showProgressBarLabel: Boolean!

  """
  Whether the progress bar should have an end-of-campaign summary text of the progress
  """
  showProgressBarEndText: Boolean!
}

"""Information on progress toward a target impact goal for the campaign"""
type CampaignSocialSharing {
  """The URL to share"""
  url: String!

  """Props for the email social sharing button"""
  EmailShareButtonProps: CampaignSocialSharingEmailProps

  """Props for the Facebook social sharing button"""
  FacebookShareButtonProps: CampaignSocialSharingFacebookProps

  """Props for the Reddit social sharing button"""
  RedditShareButtonProps: CampaignSocialSharingRedditProps

  """Props for the Tumblr social sharing button"""
  TumblrShareButtonProps: CampaignSocialSharingTumblrProps

  """Props for the Twitter social sharing button"""
  TwitterShareButtonProps: CampaignSocialSharingTwitterProps
}

"""Props for the email social sharing button"""
type CampaignSocialSharingEmailProps {
  """The email subject"""
  subject: String!

  """The email body"""
  body: String!
}

"""Props for the Facebook social sharing button"""
type CampaignSocialSharingFacebookProps {
  """The text to share to Facebook"""
  quote: String!
}

"""Props for the Reddit social sharing button"""
type CampaignSocialSharingRedditProps {
  """The text to share to Reddit"""
  title: String!
}

"""Props for the Tumblr social sharing button"""
type CampaignSocialSharingTumblrProps {
  """The Tumblr title"""
  title: String!

  """The Tumblr caption"""
  caption: String!
}

"""Props for the Twitter social sharing button"""
type CampaignSocialSharingTwitterProps {
  """The text to share to Twitter"""
  title: String!

  """A list of Twitter handles that relate to the post"""
  related: [String]!
}

"""Theming/styling for the campaign"""
type CampaignTheme {
  """
  The goal number of whatever impact units the campaign is hoping to achieve
  """
  color: CampaignThemeColor
}

"""Color theming for the campaign"""
type CampaignThemeColor {
  """The primary color for the theme"""
  main: String!

  """The lighter color for the theme"""
  light: String!
}

"""The start and end times (in ISO timestamps) for the campaign"""
type CampaignTime {
  """The start time of the campaign as an ISO timestamp"""
  start: String!

  """The end time of the campaign as an ISO timestamp"""
  end: String!
}

"""A connection to a list of items."""
type SearchEngineConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SearchEngineEdge]
}

"""An edge in a connection."""
type SearchEngineEdge {
  """The item at the end of the edge"""
  node: SearchEngine

  """A cursor for use in pagination"""
  cursor: String!
}

"""all important data for a search engine."""
type SearchEngine implements Node {
  """Engine's id"""
  engineId: String!

  """Name of the Search Engine"""
  name: String!

  """what order to display the search engine in a list"""
  rank: Int!

  """Whether or not the user can earn extra impact with this Search Engine"""
  isCharitable: Boolean!

  """Display string to display in the search bar"""
  inputPrompt: String!

  """The ID of an object"""
  id: ID!

  """
  A search destination URL, with a {searchTerms} placeholder for the client to replace. Use `user.searchEngine` if the user is authenticated.
  """
  searchUrl: String!
}

"""A person who uses our app"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """The users's Firebase ID (not Relay global ID, unlike the `id` field"""
  userId: String

  """Users's background image"""
  backgroundImage: BackgroundImage

  """
  A user's cause-specific impact for the cause they are currently supporting
  """
  userImpact: UserImpact

  """Users's username"""
  username: String

  """User's email"""
  email: String

  """a unique user ID sent to video ad partner truex"""
  truexId: String!

  """cause type for the user"""
  cause: Cause

  """whether a user has completed 3 video ads in the last 24 hours"""
  videoAdEligible: Boolean

  """ISO datetime string of when the user joined"""
  joined: String

  """
  Whether or not the user was created during this request. Helpful for a "get or create" mutation
  """
  justCreated: Boolean

  """User's current VC"""
  vcCurrent: Int

  """User's all time VC"""
  vcAllTime: Int

  """User's all time tab count"""
  tabs: Int

  """User's tab count for today"""
  tabsToday: Int

  """Info about the user's day of most opened tabs"""
  maxTabsDay: MaxTabsDay

  """User's vc"""
  level: Int

  """If true, serve the new Tab V4 app."""
  v4BetaEnabled: Boolean

  """if true, user has viewed intro flow in v4"""
  hasViewedIntroFlow: Boolean!

  """Remaing hearts until next level."""
  heartsUntilNextLevel: Int

  """User's total vc donated"""
  vcDonatedAllTime: Int

  """People recruited by this user"""
  recruits(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    startTime: String
    endTime: String
  ): UserRecruitsConnection

  """The number of users this user has recruited"""
  numUsersRecruited: Int

  """User widgets"""
  widgets(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
    enabled: Boolean
  ): WidgetConnection

  """User's active widget id"""
  activeWidget: String

  """the current active mission for a user"""
  currentMission: Mission

  """gets all the past missions for a user"""
  pastMissions(
    """Returns the items in the list that come after the specified cursor."""
    after: String

    """Returns the first n items from the list."""
    first: Int

    """Returns the items in the list that come before the specified cursor."""
    before: String

    """Returns the last n items from the list."""
    last: Int
  ): MissionConnection

  """User's background option"""
  backgroundOption: String

  """User's background custom image"""
  customImage: String

  """User's background color"""
  backgroundColor: String

  """
  Whether this user was created by an existing user and then merged into the existing user
  """
  mergedIntoExistingUser: Boolean

  """User's all time search count"""
  searches: Int

  """notifications for the v4 user to see"""
  notifications: [notifications]!

  """User's search count for today"""
  searchesToday: Int

  """Info about any search query rate-limiting"""
  searchRateLimit: SearchRateLimit

  """Info about the user's day of most searches"""
  maxSearchesDay: MaxSearchesDay

  """Actions the user has taken during experiments"""
  experimentActions: ExperimentActionsOutput
  pendingMissionInvites: [PendingMissionInvite]!

  """whether a v4 user has been introduced to squads in the ui"""
  hasSeenSquads: Boolean!

  """feature values for this specific user"""
  features: [Feature]!

  """the User’s search engine"""
  searchEngine: SearchEnginePersonalized

  """whether to show the yahoo search prompt"""
  showYahooPrompt: Boolean!

  """whether to show the SFAC extension prompt"""
  showSfacExtensionPrompt: Boolean!

  """whether to show the SFAC icon (and activity ui element)"""
  showSfacIcon: Boolean!
  sfacActivityState: sfacActivityState!

  """whether or not the user has opted into searching for extra impact"""
  yahooPaidSearchRewardOptIn: Boolean!
}

"""a user's charity specific impact"""
type UserImpact {
  """The ID of an object"""
  id: ID!
  userId: String!
  charityId: String!

  """a users impact for a specific charity"""
  userImpactMetric: Float!

  """a users pending impact based on referrals"""
  pendingUserReferralImpact: Float!

  """pending user referral count"""
  pendingUserReferralCount: Float!

  """visits remaining until next recorded impact"""
  visitsUntilNextImpact: Float!

  """enables a user to start accruing impact"""
  confirmedImpact: Boolean!

  """flag that indicates if user has celebrated latest impact"""
  hasClaimedLatestReward: Boolean!
}

"""Info about the user's day of most opened tabs"""
type MaxTabsDay {
  """The day the most tabs were opened"""
  date: String

  """The number of tabs opened on that day"""
  numTabs: Int
}

"""A connection to a list of items."""
type UserRecruitsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserRecruitsEdge]

  """The count of users recruited (signed up)"""
  totalRecruits: Int

  """The count of users recruited who remained active for one day or more"""
  recruitsActiveForAtLeastOneDay: Int

  """The count of users recruited who have opened one tab or more"""
  recruitsWithAtLeastOneTab: Int
}

"""An edge in a connection."""
type UserRecruitsEdge {
  """The item at the end of the edge"""
  node: UserRecruits

  """A cursor for use in pagination"""
  cursor: String!
}

"""Info about a user recruited by a referring user"""
type UserRecruits {
  """The ID of an object"""
  id: ID!

  """ISO datetime string of when the recruited user joined"""
  recruitedAt: String
}

"""A goal that Tabbers complete with a group of friends"""
type Mission {
  """Mission ID"""
  missionId: String!

  """
  the current status of the current mission - pending, started, completed
  """
  status: missionStatus!

  """the name of the squad"""
  squadName: String!

  """the number of tabs to complete mission"""
  tabGoal: Int!

  """the sum of users' number of tabs towards mission"""
  tabCount: Int!

  """if a user has acknowledged mission complete"""
  acknowledgedMissionComplete: Boolean!

  """if a user has acknowledged mission started"""
  acknowledgedMissionStarted: Boolean!

  """stats and state of each squad member"""
  squadMembers: [SquadMemberInfo]!

  """the end of mission awards calculated when mission completes"""
  endOfMissionAwards: [EndOfMissionAward]!

  """ISO datetime string of when the mission started"""
  started: String

  """ISO datetime string of when the mission completed"""
  completed: String
}

"""whether a user has accepted rejected or is pending invitation"""
enum missionStatus {
  pending
  started
  completed
}

"""an individual's stats for a mission"""
type SquadMemberInfo {
  """Users's username if they have joined TFAC"""
  username: String

  """Users's invited email if they have not joined TFAC"""
  invitedEmail: String
  status: squadAcceptedStatus!

  """the longest tab streak in days so far"""
  longestTabStreak: Int!

  """the current tab streak in days so far"""
  currentTabStreak: Int!

  """the most tabs in a single day"""
  missionMaxTabsDay: Int!

  """the current tabs today"""
  missionCurrentTabsDay: Int!

  """users tab contribution"""
  tabs: Int!
}

"""whether a user has accepted rejected or is pending invitation"""
enum squadAcceptedStatus {
  pending
  accepted
  rejected
}

"""persistant awards calculated at end of mission"""
type EndOfMissionAward {
  """users ID"""
  user: String!

  """the string name of the particular award"""
  awardType: String!

  """the numerical stat for the award, such as number of tabs"""
  unit: Int!
}

"""A connection to a list of items."""
type MissionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MissionEdge]
}

"""An edge in a connection."""
type MissionEdge {
  """The item at the end of the edge"""
  node: Mission

  """A cursor for use in pagination"""
  cursor: String!
}

"""user notifications to show on v4"""
type notifications {
  """the kind of notification it is"""
  code: String

  """
  the variation of the notification given to this user (e.g. for A/B testing)
  """
  variation: String!
}

"""Info about any rate-limiting for VC earned from search queries"""
type SearchRateLimit {
  """
  Whether we are currently rate-limiting the user's VC earned from searches
  """
  limitReached: Boolean
  reason: SearchRateLimitReason

  """Whether we should present the user with a CAPTCHA"""
  checkIfHuman: Boolean
}

"""Why we are rate-limiting the user's VC earned from searches"""
enum SearchRateLimitReason {
  NONE
  ONE_MINUTE_MAX
  FIVE_MINUTE_MAX
  DAILY_MAX
}

"""Info about the user's day of most searches"""
type MaxSearchesDay {
  """The day (datetime)the most searches occurred"""
  date: String

  """The number of searches made on that day"""
  numSearches: Int
}

"""The actions a user has taken in an experiment"""
type ExperimentActionsOutput {
  searchIntro: ExperimentActionSearchIntro
  referralNotification: ExperimentActionReferralNotification
}

"""Action taken in response to the "search intro" experiment."""
enum ExperimentActionSearchIntro {
  NONE
  DISMISS
  CLICK
}

"""Action taken in response to the "referral notification" experiment."""
enum ExperimentActionReferralNotification {
  NONE
  DISMISS
  CLICK
}

"""pending mission invites for user"""
type PendingMissionInvite {
  """the mission id of the squad invite"""
  missionId: String!
  invitingUser: InvitingUser
}

"""inviting user"""
type InvitingUser {
  """the name entered in invite"""
  name: String!
}

"""Feature name and variation value pair applicable to a user."""
type Feature {
  """Name of the Feature"""
  featureName: String!

  """the value of the variation for this specific user"""
  variation: String!
}

"""
SearchEngineType extended with fields potentially personalized to the user
"""
type SearchEnginePersonalized implements Node {
  """Engine's id"""
  engineId: String!

  """Name of the Search Engine"""
  name: String!

  """what order to display the search engine in a list"""
  rank: Int!

  """Whether or not the user can earn extra impact with this Search Engine"""
  isCharitable: Boolean!

  """Display string to display in the search bar"""
  inputPrompt: String!

  """
  Use this for the user's search behavior. A search destination URL, with a {searchTerms} placeholder for the client to replace. The URL might be personalized based on the user.
  """
  searchUrlPersonalized: String!

  """The ID of an object"""
  id: ID!
}

"""what mode in which to show SFAC searches UI"""
enum sfacActivityState {
  new
  active
  inactive
}

type Mutation {
  logTab(input: LogTabInput!): LogTabPayload
  updateImpact(input: UpdateImpactInput!): UpdateImpactPayload
  createInvitedUsers(input: CreateInvitedUsersInput!): CreateInvitedUsersPayload
  createSquadInvites(input: CreateSquadInvitesInput!): CreateSquadInvitesPayload
  logSearch(input: LogSearchInput!): LogSearchPayload
  logUserRevenue(input: LogUserRevenueInput!): LogUserRevenuePayload
  logUserDataConsent(input: LogUserDataConsentInput!): LogUserDataConsentPayload
  donateVc(input: DonateVcInput!): DonateVcPayload
  mergeIntoExistingUser(input: MergeIntoExistingUserInput!): MergeIntoExistingUserPayload
  logEmailVerified(input: LogEmailVerifiedMutationInput!): LogEmailVerifiedMutationPayload
  logReferralLinkClick(input: LogReferralLinkClickInput!): LogReferralLinkClickPayload
  setUserBkgImage(input: SetUserBkgImageInput!): SetUserBkgImagePayload
  setUserBkgColor(input: SetUserBkgColorInput!): SetUserBkgColorPayload
  setUserBkgCustomImage(input: SetUserBkgCustomImageInput!): SetUserBkgCustomImagePayload
  setUserBkgDailyImage(input: SetUserBkgDailyImageInput!): SetUserBkgDailyImagePayload
  updateWidgetData(input: UpdateWidgetDataInput!): UpdateWidgetDataPayload
  updateWidgetVisibility(input: UpdateWidgetVisibilityInput!): UpdateWidgetVisibilityPayload
  updateWidgetEnabled(input: UpdateWidgetEnabledInput!): UpdateWidgetEnabledPayload
  updateWidgetConfig(input: UpdateWidgetConfigInput!): UpdateWidgetConfigPayload
  setUserActiveWidget(input: SetUserActiveWidgetInput!): SetUserActiveWidgetPayload
  createNewUser(input: CreateNewUserInput!): CreateNewUserPayload
  createNewMission(input: CreateNewMissionInput!): CreateNewMissionPayload
  setUsername(input: SetUsernameInput!): SetUsernamePayload
  setEmail(input: SetEmailInput!): SetEmailPayload
  updateUserExperimentGroups(input: UpdateUserExperimentGroupsInput!): UpdateUserExperimentGroupsPayload
  logUserExperimentActions(input: LogUserExperimentActionsInput!): LogUserExperimentActionsPayload
  setV4Beta(input: SetV4BetaInput!): SetV4BetaPayload
  setHasViewedIntroFlow(input: SetHasViewedIntroFlowInput!): SetHasViewedIntroFlowPayload
  setUserCause(input: SetUserCauseInput!): SetUserCausePayload
  deleteUser(input: DeleteUserInput!): DeleteUserPayload
  squadInviteResponse(input: SquadInviteResponseInput!): SquadInviteResponsePayload
  updateMissionNotification(input: UpdateMissionNotificationInput!): UpdateMissionNotificationPayload
  setHasSeenSquads(input: SetHasSeenSquadsInput!): SetHasSeenSquadsPayload
  setHasSeenCompletedMission(input: SetHasSeenCompletedMissionInput!): SetHasSeenCompletedMissionPayload
  restartMission(input: RestartMissionInput!): RestartMissionPayload
  createVideoAdLog(input: CreateVideoAdLogInput!): CreateVideoAdLogPayload
  logVideoAdComplete(input: LogVideoAdCompleteInput!): LogVideoAdCompletePayload
  setYahooSearchOptIn(input: SetYahooSearchOptInInput!): SetYahooSearchOptInPayload
  setUserSearchEngine(input: SetUserSearchEngineInput!): SetUserSearchEnginePayload
  createSearchEnginePromptLog(input: CreateSearchEnginePromptLogInput!): CreateSearchEnginePromptLogPayload
  createSfacExtensionPromptResponse(input: CreateSfacExtensionPromptResponseInput!): CreateSfacExtensionPromptResponsePayload
  createUserExperiment(input: CreateUserExperimentInput!): CreateUserExperimentPayload
}

type LogTabPayload {
  user: User
  clientMutationId: String
}

input LogTabInput {
  userId: String!
  tabId: String
  isV4: Boolean
  clientMutationId: String
}

type UpdateImpactPayload {
  userImpact: UserImpact
  clientMutationId: String
}

input UpdateImpactInput {
  userId: String!
  charityId: String
  logImpact: Boolean
  claimPendingUserReferralImpact: Boolean
  confirmImpact: Boolean
  claimLatestReward: Boolean
  clientMutationId: String
}

type CreateInvitedUsersPayload {
  successfulEmailAddresses: [successfulEmailAddresses]
  failedEmailAddresses: [failedEmailAddresses]
  clientMutationId: String
}

type successfulEmailAddresses {
  email: String
}

type failedEmailAddresses {
  email: String
  error: String
}

input CreateInvitedUsersInput {
  inviterId: String!
  invitedEmails: [String]!
  inviterName: String
  inviterMessage: String
  clientMutationId: String
}

type CreateSquadInvitesPayload {
  """the current active mission for a user"""
  currentMission: Mission
  clientMutationId: String
}

input CreateSquadInvitesInput {
  inviterId: String!
  invitedEmails: [String]!
  inviterName: String!
  inviterMessage: String
  clientMutationId: String
}

type LogSearchPayload {
  user: User
  success: Boolean
  clientMutationId: String
}

input LogSearchInput {
  """
  The user Relay global ID. Provide either this or `userId` for an existing user.
  """
  userIdGlobal: String

  """
  The actual user ID (not the Relay global). Provide either this or `userIdGlobal` for an existing user.
  """
  userId: String

  """The anonymous user ID. Provide this for an anonymous user."""
  anonUserId: String
  source: String
  causeId: String
  searchEngineId: String
  version: Int
  clientMutationId: String
}

type LogUserRevenuePayload {
  success: Boolean!
  clientMutationId: String
}

input LogUserRevenueInput {
  userId: String!
  revenue: Float

  """A revenue value encoded because it is not available on the client side"""
  encodedRevenue: EncodedRevenueValue
  aggregationOperation: LogUserRevenueAggregationOperationEnum
  dfpAdvertiserId: String
  adUnitCode: String
  tabId: String
  adSize: String
  isV4: Boolean
  clientMutationId: String
}

"""An object representing a single revenue value"""
input EncodedRevenueValue {
  encodingType: EncodedRevenueValueTypeEnum!

  """
  A string that we can decode to a revenue value (float) using the "encodingType" method
  """
  encodedValue: String!
  adSize: String
}

"""
The type of transformation we should use to resolve the object into a revenue value
"""
enum EncodedRevenueValueTypeEnum {
  AMAZON_CPM
}

"""
The operation to use to resolve multiple values into a final revenue value. We currently only support "MAX".
"""
enum LogUserRevenueAggregationOperationEnum {
  MAX
}

type LogUserDataConsentPayload {
  success: Boolean!
  clientMutationId: String
}

input LogUserDataConsentInput {
  userId: String!
  consentString: String!
  isGlobalConsent: Boolean!
  clientMutationId: String
}

type DonateVcPayload {
  user: User
  errors: [CustomError]
  clientMutationId: String
}

"""For expected errors, such as during form validation"""
type CustomError {
  """The error code"""
  code: String

  """The error message"""
  message: String
}

input DonateVcInput {
  userId: String!
  charityId: String!
  vc: Int!
  clientMutationId: String
}

type MergeIntoExistingUserPayload {
  success: Boolean!
  clientMutationId: String
}

input MergeIntoExistingUserInput {
  userId: String!
  clientMutationId: String
}

type LogEmailVerifiedMutationPayload {
  user: User
  clientMutationId: String
}

input LogEmailVerifiedMutationInput {
  userId: String!
  clientMutationId: String
}

type LogReferralLinkClickPayload {
  success: Boolean!
  clientMutationId: String
}

input LogReferralLinkClickInput {
  userId: String!
  clientMutationId: String
}

type SetUserBkgImagePayload {
  user: User
  clientMutationId: String
}

input SetUserBkgImageInput {
  userId: String!
  imageId: String!
  clientMutationId: String
}

type SetUserBkgColorPayload {
  user: User
  clientMutationId: String
}

input SetUserBkgColorInput {
  userId: String!
  color: String!
  clientMutationId: String
}

type SetUserBkgCustomImagePayload {
  user: User
  clientMutationId: String
}

input SetUserBkgCustomImageInput {
  userId: String!
  image: String!
  clientMutationId: String
}

type SetUserBkgDailyImagePayload {
  user: User
  clientMutationId: String
}

input SetUserBkgDailyImageInput {
  userId: String!
  category: String
  clientMutationId: String
}

type UpdateWidgetDataPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetDataInput {
  userId: String!
  widgetId: String!
  data: String!
  clientMutationId: String
}

type UpdateWidgetVisibilityPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetVisibilityInput {
  userId: String!
  widgetId: String!
  visible: Boolean!
  clientMutationId: String
}

type UpdateWidgetEnabledPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetEnabledInput {
  userId: String!
  widgetId: String!
  enabled: Boolean!
  clientMutationId: String
}

type UpdateWidgetConfigPayload {
  widget: Widget
  clientMutationId: String
}

input UpdateWidgetConfigInput {
  userId: String!
  widgetId: String!
  config: String!
  clientMutationId: String
}

type SetUserActiveWidgetPayload {
  user: User
  clientMutationId: String
}

input SetUserActiveWidgetInput {
  userId: String!
  widgetId: String!
  clientMutationId: String
}

type CreateNewUserPayload {
  user: User
  clientMutationId: String
}

input CreateNewUserInput {
  userId: String!
  email: String
  referralData: ReferralData
  experimentGroups: ExperimentGroups
  extensionInstallId: String
  extensionInstallTimeApprox: String
  v4BetaEnabled: Boolean
  missionId: String
  causeId: String
  clientMutationId: String
}

input ReferralData {
  referringUser: String
  referringChannel: String
}

"""The experimental groups to which the user is assigned"""
input ExperimentGroups {
  anonSignIn: ExperimentGroupAnonSignIn
  variousAdSizes: ExperimentGroupVariousAdSizes
  thirdAd: ExperimentGroupThirdAd
  oneAdForNewUsers: ExperimentGroupOneAdForNewUsers
  adExplanation: ExperimentGroupAdExplanation
  searchIntro: ExperimentGroupSearchIntro
  referralNotification: ExperimentGroupReferralNotification
}

"""The test of allowing anonymous user authentication"""
enum ExperimentGroupAnonSignIn {
  NONE
  AUTHED_USER_ONLY
  ANONYMOUS_ALLOWED
}

"""The test of enabling many different ad sizes"""
enum ExperimentGroupVariousAdSizes {
  NONE
  STANDARD
  VARIOUS
}

"""The test of enabling a third ad"""
enum ExperimentGroupThirdAd {
  NONE
  TWO_ADS
  THREE_ADS
}

"""The test of showing only one ad to new users"""
enum ExperimentGroupOneAdForNewUsers {
  NONE
  DEFAULT
  ONE_AD_AT_FIRST
}

"""The test of showing an explanation of why there are ads"""
enum ExperimentGroupAdExplanation {
  NONE
  DEFAULT
  SHOW_EXPLANATION
}

"""The test of showing an introduction message to Search for a Cause"""
enum ExperimentGroupSearchIntro {
  NONE
  NO_INTRO
  INTRO_A
  INTRO_HOMEPAGE
}

"""The test of showing a notification to ask users to recruit friends"""
enum ExperimentGroupReferralNotification {
  NONE
  NO_NOTIFICATION
  COPY_A
  COPY_B
  COPY_C
  COPY_D
  COPY_E
}

type CreateNewMissionPayload {
  """the current active mission for a user"""
  currentMission: Mission
  clientMutationId: String
}

input CreateNewMissionInput {
  userId: String!
  squadName: String!
  clientMutationId: String
}

type SetUsernamePayload {
  user: User
  errors: [CustomError]
  clientMutationId: String
}

input SetUsernameInput {
  userId: String!
  username: String!
  clientMutationId: String
}

type SetEmailPayload {
  user: User
  errors: [CustomError]
  clientMutationId: String
}

input SetEmailInput {
  userId: String!
  clientMutationId: String
}

type UpdateUserExperimentGroupsPayload {
  user: User
  clientMutationId: String
}

input UpdateUserExperimentGroupsInput {
  userId: String!
  experimentGroups: ExperimentGroups
  clientMutationId: String
}

type LogUserExperimentActionsPayload {
  user: User
  clientMutationId: String
}

input LogUserExperimentActionsInput {
  userId: String!
  experimentActions: ExperimentActions
  clientMutationId: String
}

"""The actions a user may take in an experiment"""
input ExperimentActions {
  searchIntro: ExperimentActionSearchIntro
  referralNotification: ExperimentActionReferralNotification
}

type SetV4BetaPayload {
  user: User
  clientMutationId: String
}

input SetV4BetaInput {
  userId: String!
  enabled: Boolean!
  clientMutationId: String
}

type SetHasViewedIntroFlowPayload {
  user: User
  clientMutationId: String
}

input SetHasViewedIntroFlowInput {
  userId: String!
  enabled: Boolean!
  clientMutationId: String
}

type SetUserCausePayload {
  user: User
  clientMutationId: String
}

input SetUserCauseInput {
  userId: String!
  causeId: String!
  clientMutationId: String
}

type DeleteUserPayload {
  success: Boolean!
  clientMutationId: String
}

input DeleteUserInput {
  userId: String!
  clientMutationId: String
}

type SquadInviteResponsePayload {
  """the current active mission for a user"""
  currentMission: Mission
  clientMutationId: String
}

input SquadInviteResponseInput {
  userId: String!
  missionId: String!
  accepted: Boolean!
  clientMutationId: String
}

type UpdateMissionNotificationPayload {
  success: Boolean!
  clientMutationId: String
}

input UpdateMissionNotificationInput {
  userId: String!
  missionId: String!
  action: String!
  clientMutationId: String
}

type SetHasSeenSquadsPayload {
  user: User
  clientMutationId: String
}

input SetHasSeenSquadsInput {
  userId: String!
  clientMutationId: String
}

type SetHasSeenCompletedMissionPayload {
  success: Boolean!
  clientMutationId: String
}

input SetHasSeenCompletedMissionInput {
  userId: String!
  missionId: String!
  clientMutationId: String
}

type RestartMissionPayload {
  """the current active mission for a user"""
  currentMission: Mission
  clientMutationId: String
}

input RestartMissionInput {
  userId: String!
  missionId: String!
  clientMutationId: String
}

type CreateVideoAdLogPayload {
  VideoAdLog: VideoAdLog
  clientMutationId: String
}

"""Video Ad Log type"""
type VideoAdLog implements Node {
  """The ID of an object"""
  id: ID!
}

input CreateVideoAdLogInput {
  userId: String!
  clientMutationId: String
}

type LogVideoAdCompletePayload {
  success: Boolean!
  user: User!
  clientMutationId: String
}

input LogVideoAdCompleteInput {
  userId: String!
  signatureArgumentString: String!
  signature: String!
  videoAdId: String!
  truexAdId: String!
  truexCreativeId: String!
  clientMutationId: String
}

type SetYahooSearchOptInPayload {
  user: User
  clientMutationId: String
}

input SetYahooSearchOptInInput {
  userId: String!
  optIn: Boolean!
  clientMutationId: String
}

type SetUserSearchEnginePayload {
  user: User
  clientMutationId: String
}

input SetUserSearchEngineInput {
  userId: String!
  searchEngine: String!
  clientMutationId: String
}

type CreateSearchEnginePromptLogPayload {
  success: Boolean!
  user: User
  clientMutationId: String
}

input CreateSearchEnginePromptLogInput {
  userId: String!
  searchEnginePrompted: String!
  switched: Boolean!
  clientMutationId: String
}

type CreateSfacExtensionPromptResponsePayload {
  user: User
  clientMutationId: String
}

input CreateSfacExtensionPromptResponseInput {
  userId: String!
  browser: String!
  accepted: Boolean!
  clientMutationId: String
}

type CreateUserExperimentPayload {
  success: Boolean!
  clientMutationId: String
}

input CreateUserExperimentInput {
  userId: String!
  experimentId: String!
  variationId: Int!
  variationValueStr: String
  clientMutationId: String
}