service: web
frameworkVersion: ">=1.14.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs6.10
  region: us-west-2
  stage: ${env:SLS_STAGE, self:custom.stageDefault}

custom:
  stageDefault: dev
  stage: ${env:SLS_STAGE, self:custom.stageDefault}
  s3Bucket: ${env:WEB_S3_BUCKET_NAME}
  graphQLProxyDomain: ${env:GRAPHQL_PROXY_DOMAIN}
  graphQLProxyPath: ${env:GRAPHQL_PROXY_PATH}
  webAppName: Tab2017
  graphQLAppName: TabGraphQL
  cloudfrontDomainAlias: ${env:CLOUDFRONT_DOMAIN_ALIAS}
  SSLCertificateARN: ${env:SSL_CERTIFICATE_ARN}
  # How long Cloudfront should cache HTML at edges.
  CloudfrontHTMLCachingSeconds: 60
  websiteOrigin: ${env:WEB_LANDING_PAGE_DOMAIN}
  websiteAppName: TabLandingPage

resources:
  Resources:
    TabS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.s3Bucket}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    TabS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: TabS3Bucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
                - s3:GetObject
              Resource: arn:aws:s3:::${self:custom.s3Bucket}/*

    # Serve the app through Cloudfront.
    WebAppCloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distributionconfig.html
        DistributionConfig:
          Origins:
            # Web S3 bucket.
            - DomainName: ${self:custom.s3Bucket}.s3.amazonaws.com
              # An identifier for the origin. This must be unique within the distribution.
              Id: ${self:custom.webAppName}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                # HTTP only is required for S3 buckets that are configured as
                # website endpoints:
                # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesOriginProtocolPolicy
                OriginProtocolPolicy: http-only
            # GraphQL service.
            - DomainName: ${self:custom.graphQLProxyDomain}
              OriginPath: ${self:custom.graphQLProxyPath}
              Id: ${self:custom.graphQLAppName}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
            # Homepage / landing page.
            - DomainName: ${self:custom.websiteOrigin}
              Id: ${self:custom.websiteAppName}
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          Comment: ${self:custom.stage} new tab page and homepage
          # No default root object; our website (landing page) app handles it.
          # DefaultRootObject: index.html
          Aliases:
            - ${self:custom.cloudfrontDomainAlias}
          # Always show our single page app when there is a 404 error.
          # This is necessary because the S3 origin for most /newtab/* requests
          # will return a 404, becuase it's a single-page app with only a
          # single root index.html file in S3.
          # Note that this means we will never show the homepage's 404 page.
          # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HTTPStatusCodes.html#HTTPStatusCodes-custom-error-pages
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /newtab/index.html
              # We always return our HTML page for 404 errors, and most
              # pageviews are 404 errors because of the single-page app.
              # This is effectively how long we keep the HTML page in
              # edge caches.
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/HTTPStatusCodes.html
              ErrorCachingMinTTL: ${self:custom.CloudfrontHTMLCachingSeconds}
          # How CloudFront determines cache behavior:
          #   https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Expiration.html#ExpirationDownloadDist
          # CloudFront guide to CacheBehavior:
          #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-cachebehavior.html
          # Note that this is primarily specifying how Cloudfront edges should
          # cache files. For browser caching, we must still set Cache-Control headers
          # on the origin server (S3).
          CacheBehaviors:
            # New tab app HTML files. This origin also handle any 404
            # errors, as configured in CustomErrorResponses.
            # PathPattern docs:
            #   https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern
            - PathPattern: "newtab/*.html"
              # Short HTML caching for some spage speed gains and
              # reduced request volume to S3 origin.
              MinTTL: ${self:custom.CloudfrontHTMLCachingSeconds}
              MaxTTL: ${self:custom.CloudfrontHTMLCachingSeconds}
              AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: ${self:custom.webAppName}
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html
              Compress: true
              ViewerProtocolPolicy: redirect-to-https
            # New tab app (non-HTML) static files
            - PathPattern: "newtab/*"
              MinTTL: 31536000 # one year
              MaxTTL: 63072000 # two years
              AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: ${self:custom.webAppName}
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              Compress: true
              ViewerProtocolPolicy: redirect-to-https
            # GraphQL
            - PathPattern: "graphql*"
              MinTTL: 0
              MaxTTL: 0
              DefaultTTL: 0
              AllowedMethods:
                - HEAD
                - DELETE
                - POST
                - GET
                - OPTIONS
                - PUT
                - PATCH
              TargetOriginId: ${self:custom.graphQLAppName}
              ForwardedValues:
                # Cannot use '*', as that sends the Host header:
                # https://stackoverflow.com/a/32825414
                Headers:
                  - Authorization
                QueryString: false
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
            # Send all remaining traffic to our homepage
            - PathPattern: "*"
              # Short HTML caching for some spage speed gains and
              # reduced request volume to S3 origin.
              MinTTL: ${self:custom.CloudfrontHTMLCachingSeconds}
              MaxTTL: ${self:custom.CloudfrontHTMLCachingSeconds}
              AllowedMethods:
                - HEAD
                - GET
                - OPTIONS
              TargetOriginId: ${self:custom.websiteAppName}
              ForwardedValues:
                QueryString: false
                Cookies:
                  Forward: none
              # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html
              Compress: true
              ViewerProtocolPolicy: redirect-to-https
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
              - OPTIONS
            TargetOriginId: ${self:custom.webAppName}
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            # The protocol that users can use to access the files in the origin.
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-defaultcachebehavior.html#cfn-cloudfront-defaultcachebehavior-viewerprotocolpolicy
            ViewerProtocolPolicy: redirect-to-https
          # The certificate to use when viewers use HTTPS to request objects.
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distributionconfig-viewercertificate.html
          ViewerCertificate:
            AcmCertificateArn: ${self:custom.SSLCertificateARN}
            SslSupportMethod: sni-only

  # In order to print out the hosted domain via `serverless info`,
  # we need to define the DomainName output for CloudFormation
  Outputs:
    WebAppCloudFrontDistributionOutput:
      Value: ${self:custom.s3Bucket}.s3.amazonaws.com
